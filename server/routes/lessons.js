import express from 'express';
import LessonPlan from '../models/LessonsPlan.js';
import Users from '../models/Users.js'; // üî• –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
import Student from '../models/Student.js'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—å Student
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config(); // –ù–µ –∑–∞–±—É–¥—å –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ dotenv, —è–∫—â–æ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ

const router = express.Router();

router.get('/lessons', async (req, res) => {
  try {
    const lessons = await LessonPlan.find();
    res.render('lessons', { lessons });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —É—Ä–æ–∫—ñ–≤:', error);
    res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

router.get('/api/is-authenticated', (req, res) => {
  if (req.isAuthenticated()) {
    res.json({ authenticated: true });
  } else {
    res.json({ authenticated: false });
  }
});

// üîê –ü–æ–∫—É–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
router.post('/api/purchase', async (req, res) => {
  if (!req.isAuthenticated()) {
    return res.status(401).json({ success: false, message: '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ' });
  }

  const { lessonId } = req.body;

  try {
    const lesson = await LessonPlan.findById(lessonId);
    const userFromDb = await Users.findById(req.user._id); // –î–∞–Ω—ñ –∑ User
    const student = await Student.findOne({ userId: userFromDb._id }); // –î–∞–Ω—ñ –∑ Student

    const userEmail = userFromDb.email || '–Ω–µ–≤—ñ–¥–æ–º–æ';
    const userName = `${userFromDb.name || ''} ${userFromDb.surname || ''}`.trim();
    const userPhone = student?.phone || '–Ω–µ–≤—ñ–¥–æ–º–æ'; // –ë–µ—Ä–µ–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ Student

    sendPurchaseEmail(lesson, userEmail, userName, userPhone);
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏' });
  }
});

// üßæ –ü–æ–∫—É–ø–∫–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π
router.post('/api/purchase-guest', async (req, res) => {
  const { lessonId, name, email, phone } = req.body;

  try {
    const lesson = await LessonPlan.findById(lessonId);
    sendPurchaseEmail(lesson, email, name, phone);
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –¥–ª—è –≥–æ—Å—Ç—è:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏' });
  }
});

// üìß –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è email
function sendPurchaseEmail(lesson, userEmail, userName = '–ù–µ–≤—ñ–¥–æ–º–∏–π', userPhone = '–ù–µ–≤—ñ–¥–æ–º–∏–π') {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: process.env.EMAIL_USER,
    subject: `–ù–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞: ${lesson.title}`,
    text: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userName} (Email: ${userEmail}, –¢–µ–ª–µ—Ñ–æ–Ω: ${userPhone}) –ø—Ä–∏–¥–±–∞–≤ —É—Ä–æ–∫ "${lesson.title}".`
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∞:', error);
    } else {
      console.log('–õ–∏—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ' + info.response);
    }
  });
}

export default router;
