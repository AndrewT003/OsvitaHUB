// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –≤–∏–¥—É –ø–∞—Ä–æ–ª—è
function togglePassword(button) {
  const input = button.previousElementSibling;
  if (input.type === 'password') {
    input.type = 'text';
    button.textContent = 'üîí';
  } else {
    input.type = 'password';
    button.textContent = 'üîì';
  }
}

// –°—Ç–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è (—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–æ—Ä–∫–∞–≤—Å—è –ø–æ–ª—è)
let touchedFields = {
  name: false,
  surname: false,
  email: false,
  phone: false,
  password: false
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–ª—ñ–≤
function setupFieldValidation(field, regex, errorId, errorMessage) {
  const errorElement = document.getElementById(errorId);

  field.addEventListener('input', () => {
    touchedFields[field.name] = true;
    validate();
  });

  field.addEventListener('blur', () => {
    touchedFields[field.name] = true;
    validate();
  });

  function validate() {
    const isValid = regex.test(field.value);
    if (touchedFields[field.name]) {
      field.classList.toggle('invalid', !isValid);
      errorElement.textContent = isValid ? '' : errorMessage;
    }
    updateRegisterButtonState();
  }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ñ–æ—Ä–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function showRegister() {
  document.getElementById('formsContainer').style.transform = 'translateX(-50%)';
}

function showLogin() {
  document.getElementById('formsContainer').style.transform = 'translateX(0%)';
}

// –†–µ—Ñ–µ—Ä–µ–Ω—Å–∏ –¥–æ —Ñ–æ—Ä–º
const registerForm = document.getElementById('registerForm');
const loginForm = document.getElementById('loginForm');

// –ö–Ω–æ–ø–∫–∏
const registerBtn = document.getElementById('register-submit');
const submitLoginButton = document.getElementById('submit-login-button');

// –ü–æ–ª—è —Ñ–æ—Ä–º–∏
const name = registerForm.name;
const surname = registerForm.surname;
const email = registerForm.email;
const phone = registerForm.phone;
const password = registerForm.password;

// –†–µ–≥—É–ª—è—Ä–∫–∏
const nameValid = /^[^\s][–∞-—è–ê-–Øa-zA-Z—ë–Å—ñ—ó–Ü–á–Ñ—î“ë“ê'-]{1,}$/;
const phoneValid = /^\+380\d{9}$/;
const passwordValid = /^(?=.*[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê])(?=.*[A-Z–ê-–Ø–Ü–á–Ñ“ê])(?=.*\d).{8,}$/;
const emailValid = /^[–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ“ë“êa-zA-Z0-9._-]+@[–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ“ë“êa-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

// –°—Ç–∞–Ω email
let emailTimeout;
let emailTaken = false;

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è email –∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
function validateEmailField() {
  const errorElement = document.getElementById('email-error');

  if (!emailValid.test(email.value)) {
    if (touchedFields.email) {
      email.classList.add('invalid');
      errorElement.textContent = '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email';
    }
    emailTaken = false;
    updateRegisterButtonState();
    return;
  }

  clearTimeout(emailTimeout);
  emailTimeout = setTimeout(() => {
    fetch(`/check-email?email=${encodeURIComponent(email.value)}`)
      .then(response => response.json())
      .then(data => {
        if (data.exists) {
          if (touchedFields.email) {
            email.classList.add('invalid');
            errorElement.textContent = 'Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è';
          }
          emailTaken = true;
        } else {
          email.classList.remove('invalid');
          errorElement.textContent = '';
          emailTaken = false;
        }
        updateRegisterButtonState();
      })
      .catch(() => {
        if (touchedFields.email) {
          email.classList.add('invalid');
          errorElement.textContent = '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ email';
        }
        emailTaken = true;
        updateRegisterButtonState();
      });
  }, 500);
}

// –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –ø–æ–¥—ñ–π –¥–æ email
email.addEventListener('input', () => {
  touchedFields.email = true;
  validateEmailField();
});
email.addEventListener('blur', () => {
  touchedFields.email = true;
  validateEmailField();
});
email.addEventListener('change', validateEmailField);

// –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ª—è
setupFieldValidation(name, nameValid, 'name-error', '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è');
setupFieldValidation(surname, nameValid, 'surname-error', '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ');
setupFieldValidation(phone, phoneValid, 'phone-error', '–ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX');
setupFieldValidation(password, passwordValid, 'password-error', '–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤ —ñ –º—ñ—Å—Ç–∏—Ç–∏ –≤–µ–ª–∏–∫—ñ, –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä—É');

// –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É
function updateRegisterButtonState() {
  const allValid =
    nameValid.test(name.value) &&
    nameValid.test(surname.value) &&
    emailValid.test(email.value) &&
    phoneValid.test(phone.value) &&
    passwordValid.test(password.value) &&
    !emailTaken;

  registerBtn.disabled = !allValid;
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ–π–Ω–∞ –ª–æ–≥—ñ–∫–∞
window.addEventListener('DOMContentLoaded', () => {
  const params = new URLSearchParams(window.location.search);
  const error = params.get('error');

  const emailField = document.querySelector('input[name="email"]');
  const passwordField = document.querySelector('input[name="password"]');
  const emailError = document.getElementById('login-email-error');
  const passwordError = document.getElementById('login-password-error');

  if (error === 'wrong-password') {
    passwordField.classList.add('invalid');
    passwordError.textContent = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å';
  }

  if (error === 'email-not-found') {
    emailField.classList.add('invalid');
    emailError.textContent = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
  }

  if (error === 'wrong-password' || error === 'email-not-found') {
    const forgotLink = document.getElementById('forgot-password-link');
    if (forgotLink) {
      forgotLink.classList.remove('hidden');
    }
  }
});
